# Variables
main_package_path := ./
binary_name := export
build_dir := ./bin

# Default: detect local system arch
GOARCH := $(shell go env GOARCH)
GOOS := $(shell go env GOOS)

# Target platforms (add more if needed)
PLATFORMS := \
	linux/amd64 \
	linux/arm64 \
	darwin/amd64 \
	darwin/arm64 \
	windows/amd64

.PHONY: help build run clean build-all

help:
	@echo "Usage:"
	@echo "  make build       - Build for local system"
	@echo "  make run         - Run the built binary"
	@echo "  make clean       - Remove build artifacts"
	@echo "  make build-all   - Build for all target platforms"

build:
	@mkdir -p $(build_dir)
	GOARCH=$(GOARCH) GOOS=$(GOOS) go build -o $(build_dir)/$(binary_name)-$(GOOS)-$(GOARCH) $(main_package_path)

run: build
	@./$(build_dir)/$(binary_name)-$(GOOS)-$(GOARCH)

clean:
	@rm -rf $(build_dir)

build-all:
	@mkdir -p $(build_dir)
	@for platform in $(PLATFORMS); do \
		GOOS=$${platform%/*}; \
		GOARCH=$${platform#*/}; \
		output_name=$(build_dir)/$(binary_name)-$${GOOS}-$${GOARCH}; \
		[ "$${GOOS}" = "windows" ] && output_name=$${output_name}.exe; \
		echo "Building for $${GOOS}/$${GOARCH}..."; \
		GOOS=$${GOOS} GOARCH=$${GOARCH} go build -o $${output_name} $(main_package_path); \
	done

.PHONY: clean
clean: confirm
	@rm -rf $(build_dir)
	@echo "Cleaned build directory."

confirm:
	@read -p "Are you sure you want to clean the build directory? (y/n) " confirm && \
	if [ "$$confirm" != "y" ]; then \
		echo "Clean operation cancelled."; \
		exit 1; \
	fi	
